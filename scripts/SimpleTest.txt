using UnityEngine;
using Photon.Pun;

public class SimpleTest : MonoBehaviourPunCallbacks, IPunObservable
{
    [Header("Health Settings")]
    public float maxHealth = 100f;
    [SerializeField] private float currentHealth;

    [Header("Health Bar Settings")]
    [Range(0f, 1000f)]
    public float heightOffset = 400f;    
    public float barWidth = 100f;        
    public float barHeight = 10f;        
    public float barDepth = 5f;          

    private GameObject healthBarParent;
    private GameObject healthBar;
    private GameObject backgroundBar;
    private PlayerMovement playerMovement;
    private PhotonView photonView;
    private BoxCollider hitBox;
    private Animator animator;
    private GameManager gameManager;

    public bool isDead { get; private set; }

    void Start()
    {
        Debug.Log("Starting SimpleTest");
        photonView = GetComponent<PhotonView>();
        currentHealth = maxHealth;
        isDead = false;
        CreateHealthBar();
        playerMovement = GetComponent<PlayerMovement>();
        animator = GetComponent<Animator>();
        gameManager = FindObjectOfType<GameManager>();
        SetupCollider();
    }

    void SetupCollider()
    {
        hitBox = GetComponent<BoxCollider>();
        if (hitBox == null)
        {
            hitBox = gameObject.AddComponent<BoxCollider>();
        }
        
        hitBox.isTrigger = true;
        hitBox.size = new Vector3(1.5f, 2f, 1.5f);
        hitBox.center = new Vector3(0f, 1f, 0f);
    }

    void CreateHealthBar()
    {
        healthBarParent = new GameObject("HealthBarParent");
        healthBarParent.transform.SetParent(null);
        
        Vector3 playerPos = transform.position;
        healthBarParent.transform.position = new Vector3(playerPos.x, playerPos.y + heightOffset, playerPos.z);

        backgroundBar = GameObject.CreatePrimitive(PrimitiveType.Cube);
        backgroundBar.transform.SetParent(healthBarParent.transform);
        backgroundBar.transform.localPosition = Vector3.zero;
        backgroundBar.transform.localScale = new Vector3(barWidth, barHeight, barDepth);
        Destroy(backgroundBar.GetComponent<BoxCollider>());
        
        Material redMaterial = new Material(Shader.Find("Unlit/Color"));
        redMaterial.color = Color.red;
        backgroundBar.GetComponent<MeshRenderer>().sharedMaterial = redMaterial;

        healthBar = GameObject.CreatePrimitive(PrimitiveType.Cube);
        healthBar.transform.SetParent(healthBarParent.transform);
        healthBar.transform.localPosition = new Vector3(0, 0, -0.1f);
        healthBar.transform.localScale = new Vector3(barWidth, barHeight, barDepth);
        Destroy(healthBar.GetComponent<BoxCollider>());
        
        Material greenMaterial = new Material(Shader.Find("Unlit/Color"));
        greenMaterial.color = Color.green;
        healthBar.GetComponent<MeshRenderer>().sharedMaterial = greenMaterial;
    }

    void Update()
    {
        if (isDead) return;
        UpdateHealthBar();
    }

    void UpdateHealthBar()
    {
        if (healthBarParent == null) return;

        Vector3 playerPos = transform.position;
        healthBarParent.transform.position = new Vector3(playerPos.x, playerPos.y + heightOffset, playerPos.z);

        if (healthBar != null)
        {
            float healthPercent = currentHealth / maxHealth;
            Vector3 newScale = healthBar.transform.localScale;
            newScale.x = barWidth * healthPercent;
            healthBar.transform.localScale = newScale;

            healthBar.transform.localPosition = new Vector3(
                -(barWidth - newScale.x) * 0.5f, 
                0, 
                -0.1f
            );
        }

        if (Camera.main != null)
        {
            healthBarParent.transform.LookAt(Camera.main.transform);
            healthBarParent.transform.Rotate(0, 180, 0);
        }
    }

    [PunRPC]
    public void TakeDamage(float damage)
    {
        if (!photonView.IsMine || isDead) return;
        
        Debug.Log($"[HEALTH] Before damage: {currentHealth}");
        currentHealth -= damage;
        currentHealth = Mathf.Max(currentHealth, 0);
        Debug.Log($"[HEALTH] After damage: {currentHealth}");
        
        UpdateHealthBar();

        if (currentHealth <= 0 && !isDead)
        {
            Die();
        }
    }

    private void Die()
    {
        if (!photonView.IsMine) return;

        isDead = true;
        Debug.Log("[HEALTH] Player died!");
        
        if (animator != null)
        {
            animator.SetTrigger("Die");
        }

        if (playerMovement != null)
        {
            playerMovement.enabled = false;
        }

        if (healthBarParent != null)
        {
            healthBarParent.SetActive(false);
        }

        if (gameManager != null)
        {
            gameManager.OnPlayerEliminated(PhotonNetwork.LocalPlayer.NickName);
        }

        if (hitBox != null)
        {
            hitBox.enabled = false;
        }
    }

    public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
    {
        if (stream.IsWriting)
        {
            stream.SendNext(currentHealth);
            stream.SendNext(isDead);
        }
        else
        {
            currentHealth = (float)stream.ReceiveNext();
            isDead = (bool)stream.ReceiveNext();
            UpdateHealthBar();
        }
    }

    void OnDestroy()
    {
        if (healthBarParent != null)
        {
            Destroy(healthBarParent);
        }
    }
}